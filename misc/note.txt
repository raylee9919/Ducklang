








<Parser>
"Alphabet" = "Tokens" ...is it same as 'atomic'?
"String" = "Expression"

Finite set of rules -> Finite set of valid strings.
'Rules' = 'Productions'
          'Production'
               /\
              /  \
            Head Body
           (name)  \
                    \
          list of 'Symbols'.
                   'Symbol'
                      /\
                     /  \
                    T   NT

Expression Problem: Row vs Column major?
                    OOP vs FP
                    Type vs Operator major?
                    'Crafting Interpreters' uses 'Visitor Pattern' to resolve.


'Precedance' and 'Associativity' are for resolving 'Ambiguity'.


            Expression
                /\
               /  \
              /    \
         Symbol ... Symbol

    1. Prefix Expressions
    e.g. If expression starts with '(', we know we must be looking at a 
         parenthesized grouping expression. '(', '!' , '-'

    2. Infix Expressions



===============================================================================
"Parsing expressions by precedence climbing - Eli Bendersky" is really 
understandable, compared to, so called, the 'Dragon Book'.
J. Blow and Casey's discussion about precedence is also a gold. It completes 
the blanked out, but critical part of the understanding.
